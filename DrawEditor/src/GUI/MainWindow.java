// *********************************************************************
// **
// ** Copyright (C) 2017 Antonio David LÃ³pez Machado
// **
// ** This program is free software: you can redistribute it and/or modify
// ** it under the terms of the GNU General Public License as published by
// ** the Free Software Foundation, either version 3 of the License, or
// ** (at your option) any later version.
// **
// ** This program is distributed in the hope that it will be useful,
// ** but WITHOUT ANY WARRANTY; without even the implied warranty of
// ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// ** GNU General Public License for more details.
// **
// ** You should have received a copy of the GNU General Public License
// ** along with this program.  If not, see <http://www.gnu.org/licenses/>.
// **
// *********************************************************************

package GUI;

import draweditor.FileManager;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import sm.ALM.graficos.Canvas2DPanel;
import sm.ALM.graficos.*;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.GraphicsEnvironment;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Shape;
import java.awt.Transparency;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.geom.Rectangle2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ByteLookupTable;
import java.awt.image.ColorConvertOp;
import java.awt.image.ColorModel;
import java.awt.image.ComponentColorModel;
import java.awt.image.ConvolveOp;
import java.awt.image.DataBuffer;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.awt.image.WritableRaster;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.ALM.imagen.MybufferedImageOp;
import sm.ALM.imagen.SepiaOp;
import sm.ALM.imagen.UmbralizacionOp;
import sm.image.EqualizationOp;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;
import sm.image.TintOp;

public class MainWindow extends javax.swing.JFrame {
    /**
     * Creates new form MainWindow
     */
    
    InternalWindow currentIntWind; 
    BufferedImage imgSource;
    FileManager file;
    
    public MainWindow() {
        setMinimumSize(new Dimension(1200,900));
        initComponents();
        
        Color colors[] = { Color.BLACK, Color.RED, Color.BLUE, Color.WHITE, Color.YELLOW, Color.GREEN };
      
        for(Color color : colors)
            ColorCombo.addItem(color);
        
        ColorCombo.setRenderer(new ColorComboRenderer());
        
        thickSpinner.setValue(1); 
        file=FileManager.getSingletonInstance();
        
        //Initialize font list
        GraphicsEnvironment ge;
        ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        String []systemFont = ge.getAvailableFontFamilyNames();
        
        fontCombo.setModel(new DefaultComboBoxModel(systemFont));
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        DrawPanel = new javax.swing.JPanel();
        toolBarPanel = new javax.swing.JPanel();
        NewFileButton = new javax.swing.JButton();
        OpenButton = new javax.swing.JButton();
        SaveButton = new javax.swing.JButton();
        CopyButton = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();
        PointButton = new javax.swing.JToggleButton();
        LineButton = new javax.swing.JToggleButton();
        RtgleButton = new javax.swing.JToggleButton();
        RRtglButton = new javax.swing.JToggleButton();
        CircleButton = new javax.swing.JToggleButton();
        TextButton = new javax.swing.JToggleButton();
        EditButton = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        ColorCombo = new javax.swing.JComboBox();
        jSeparator3 = new javax.swing.JSeparator();
        thickSpinner = new javax.swing.JSpinner();
        typeLineCombo = new javax.swing.JComboBox();
        jSeparator4 = new javax.swing.JSeparator();
        FilledButton = new javax.swing.JToggleButton();
        TransButton = new javax.swing.JToggleButton();
        SmoothButton = new javax.swing.JToggleButton();
        jSeparator5 = new javax.swing.JSeparator();
        fontCombo = new javax.swing.JComboBox();
        SizeFontSpinner = new javax.swing.JSpinner();
        AttributePanel = new javax.swing.JPanel();
        StateBarPanel = new javax.swing.JPanel();
        StateBarLabel = new javax.swing.JLabel();
        CursorPosLabel = new javax.swing.JLabel();
        AttributeToolBar = new javax.swing.JToolBar();
        ShinePanel = new javax.swing.JPanel();
        ShineSlider = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        FilterCombo = new javax.swing.JComboBox();
        ContrastPanel = new javax.swing.JPanel();
        contrastButton = new javax.swing.JButton();
        LightUpButton = new javax.swing.JButton();
        GetDarkButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        SenButton = new javax.swing.JButton();
        sepiaButton = new javax.swing.JButton();
        NegativeButton = new javax.swing.JButton();
        GrayButton = new javax.swing.JButton();
        OwnFilterButton = new javax.swing.JButton();
        dyeButton = new javax.swing.JButton();
        equalizationButton = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        BandButton = new javax.swing.JButton();
        ColorSpaceCombo = new javax.swing.JComboBox();
        RotationPanel = new javax.swing.JPanel();
        RotationSlider = new javax.swing.JSlider();
        rot90Button = new javax.swing.JButton();
        rot180Button = new javax.swing.JButton();
        rot270Button = new javax.swing.JButton();
        ScalePanel = new javax.swing.JPanel();
        MoreScaleButton = new javax.swing.JButton();
        LessScaleButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        umbraSlider = new javax.swing.JSlider();
        mainDesktop = new javax.swing.JDesktopPane();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenuItem();
        OpenMenu = new javax.swing.JMenuItem();
        openSoundButton = new javax.swing.JMenuItem();
        SaveMenu = new javax.swing.JMenuItem();
        recordSoundButton = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        SeeSBMenu = new javax.swing.JCheckBoxMenuItem();
        SeeGeoMenu = new javax.swing.JCheckBoxMenuItem();
        SeeAttMenu = new javax.swing.JCheckBoxMenuItem();
        resizeItem = new javax.swing.JMenu();
        ResizeItem = new javax.swing.JMenuItem();
        HelpItem = new javax.swing.JMenu();
        AboutItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DrawEditor");

        DrawPanel.setLayout(new java.awt.BorderLayout());

        NewFileButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/nuevo.png"))); // NOI18N
        NewFileButton.setToolTipText("New file");
        NewFileButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        NewFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewFileButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(NewFileButton);

        OpenButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/abrir.png"))); // NOI18N
        OpenButton.setToolTipText("Open file");
        OpenButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        OpenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(OpenButton);

        SaveButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Guardar.gif"))); // NOI18N
        SaveButton.setToolTipText("Save file");
        SaveButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(SaveButton);

        CopyButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/copy.png"))); // NOI18N
        CopyButton.setToolTipText("Copy Image");
        CopyButton.setPreferredSize(new java.awt.Dimension(31, 31));
        CopyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CopyButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(CopyButton);

        jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator2.setPreferredSize(new java.awt.Dimension(2, 31));
        toolBarPanel.add(jSeparator2);

        buttonGroup1.add(PointButton);
        PointButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        PointButton.setSelected(true);
        PointButton.setToolTipText("Point");
        PointButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        PointButton.setFocusable(false);
        PointButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PointButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        PointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PointButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(PointButton);

        buttonGroup1.add(LineButton);
        LineButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        LineButton.setToolTipText("Line");
        LineButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        LineButton.setFocusable(false);
        LineButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        LineButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        LineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(LineButton);

        buttonGroup1.add(RtgleButton);
        RtgleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        RtgleButton.setToolTipText("Rectangle");
        RtgleButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        RtgleButton.setFocusable(false);
        RtgleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RtgleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        RtgleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RtgleButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(RtgleButton);

        buttonGroup1.add(RRtglButton);
        RRtglButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        RRtglButton.setPreferredSize(new java.awt.Dimension(31, 31));
        RRtglButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RRtglButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(RRtglButton);

        buttonGroup1.add(CircleButton);
        CircleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        CircleButton.setToolTipText("Ellipse");
        CircleButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CircleButton.setFocusable(false);
        CircleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CircleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        CircleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CircleButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(CircleButton);

        buttonGroup1.add(TextButton);
        TextButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/Texto.gif"))); // NOI18N
        TextButton.setPreferredSize(new java.awt.Dimension(31, 31));
        TextButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(TextButton);

        buttonGroup1.add(EditButton);
        EditButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        EditButton.setToolTipText("Edit mode");
        EditButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(EditButton);

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator1.setPreferredSize(new java.awt.Dimension(2, 31));
        toolBarPanel.add(jSeparator1);

        ColorCombo.setToolTipText("Color");
        ColorCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorComboActionPerformed(evt);
            }
        });
        toolBarPanel.add(ColorCombo);

        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator3.setPreferredSize(new java.awt.Dimension(2, 31));
        toolBarPanel.add(jSeparator3);

        thickSpinner.setToolTipText("Thickness");
        thickSpinner.setMinimumSize(new java.awt.Dimension(50, 22));
        thickSpinner.setPreferredSize(new java.awt.Dimension(50, 22));
        thickSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thickSpinnerStateChanged(evt);
            }
        });
        toolBarPanel.add(thickSpinner);

        typeLineCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Solid line", "Broken line" }));
        typeLineCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeLineComboActionPerformed(evt);
            }
        });
        toolBarPanel.add(typeLineCombo);

        jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator4.setToolTipText("");
        jSeparator4.setMinimumSize(new java.awt.Dimension(2, 31));
        jSeparator4.setPreferredSize(new java.awt.Dimension(2, 31));
        toolBarPanel.add(jSeparator4);

        FilledButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        FilledButton.setToolTipText("Filled");
        FilledButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        FilledButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilledButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(FilledButton);

        TransButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        TransButton.setToolTipText("Transparency");
        TransButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        TransButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(TransButton);

        SmoothButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        SmoothButton.setToolTipText("Smooth");
        SmoothButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SmoothButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SmoothButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(SmoothButton);

        jSeparator5.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jSeparator5.setPreferredSize(new java.awt.Dimension(2, 31));
        toolBarPanel.add(jSeparator5);

        fontCombo.setMaximumSize(new java.awt.Dimension(100, 31));
        toolBarPanel.add(fontCombo);
        toolBarPanel.add(SizeFontSpinner);

        DrawPanel.add(toolBarPanel, java.awt.BorderLayout.WEST);

        getContentPane().add(DrawPanel, java.awt.BorderLayout.NORTH);

        AttributePanel.setLayout(new java.awt.BorderLayout());

        StateBarPanel.setLayout(new java.awt.BorderLayout());

        StateBarLabel.setText("State bar");
        StateBarLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        StateBarLabel.setPreferredSize(new java.awt.Dimension(53, 30));
        StateBarPanel.add(StateBarLabel, java.awt.BorderLayout.CENTER);

        CursorPosLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        StateBarPanel.add(CursorPosLabel, java.awt.BorderLayout.LINE_END);

        AttributePanel.add(StateBarPanel, java.awt.BorderLayout.SOUTH);

        AttributeToolBar.setRollover(true);
        AttributeToolBar.setPreferredSize(new java.awt.Dimension(1000, 85));

        ShinePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Shine"));
        ShinePanel.setToolTipText("Shine");
        ShinePanel.setPreferredSize(new java.awt.Dimension(120, 90));

        ShineSlider.setMaximum(255);
        ShineSlider.setMinimum(-255);
        ShineSlider.setValue(0);
        ShineSlider.setPreferredSize(new java.awt.Dimension(100, 26));
        ShineSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ShineSliderStateChanged(evt);
            }
        });
        ShineSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ShineSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ShineSliderFocusLost(evt);
            }
        });
        ShinePanel.add(ShineSlider);

        AttributeToolBar.add(ShinePanel);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));
        jPanel1.setToolTipText("Filter");
        jPanel1.setPreferredSize(new java.awt.Dimension(100, 110));

        FilterCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano" }));
        FilterCombo.setPreferredSize(new java.awt.Dimension(80, 22));
        FilterCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                FilterComboItemStateChanged(evt);
            }
        });
        FilterCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterComboActionPerformed(evt);
            }
        });
        jPanel1.add(FilterCombo);

        AttributeToolBar.add(jPanel1);

        ContrastPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Contrast"));
        ContrastPanel.setToolTipText("Contrast");
        ContrastPanel.setPreferredSize(new java.awt.Dimension(140, 110));

        contrastButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        contrastButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        contrastButton.setPreferredSize(new java.awt.Dimension(31, 31));
        contrastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrastButtonActionPerformed(evt);
            }
        });
        ContrastPanel.add(contrastButton);

        LightUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        LightUpButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        LightUpButton.setPreferredSize(new java.awt.Dimension(31, 31));
        LightUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LightUpButtonActionPerformed(evt);
            }
        });
        ContrastPanel.add(LightUpButton);

        GetDarkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        GetDarkButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        GetDarkButton.setPreferredSize(new java.awt.Dimension(31, 31));
        GetDarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetDarkButtonActionPerformed(evt);
            }
        });
        ContrastPanel.add(GetDarkButton);

        AttributeToolBar.add(ContrastPanel);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(" "));
        jPanel2.setToolTipText("SenFilter");
        jPanel2.setPreferredSize(new java.awt.Dimension(280, 110));

        SenButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sinusoidal.png"))); // NOI18N
        SenButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SenButton.setPreferredSize(new java.awt.Dimension(31, 31));
        SenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SenButtonActionPerformed(evt);
            }
        });
        jPanel2.add(SenButton);

        sepiaButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/sepia.png"))); // NOI18N
        sepiaButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        sepiaButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sepiaButtonActionPerformed(evt);
            }
        });
        jPanel2.add(sepiaButton);

        NegativeButton.setText("N");
        NegativeButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        NegativeButton.setMinimumSize(new java.awt.Dimension(31, 31));
        NegativeButton.setPreferredSize(new java.awt.Dimension(31, 31));
        NegativeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NegativeButtonActionPerformed(evt);
            }
        });
        jPanel2.add(NegativeButton);

        GrayButton.setText("G");
        GrayButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        GrayButton.setPreferredSize(new java.awt.Dimension(31, 31));
        GrayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GrayButtonActionPerformed(evt);
            }
        });
        jPanel2.add(GrayButton);

        OwnFilterButton.setText("P");
        OwnFilterButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        OwnFilterButton.setPreferredSize(new java.awt.Dimension(31, 31));
        OwnFilterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OwnFilterButtonActionPerformed(evt);
            }
        });
        jPanel2.add(OwnFilterButton);

        dyeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/tintar.png"))); // NOI18N
        dyeButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        dyeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dyeButtonActionPerformed(evt);
            }
        });
        jPanel2.add(dyeButton);

        equalizationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/ecualizar.png"))); // NOI18N
        equalizationButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        equalizationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalizationButtonActionPerformed(evt);
            }
        });
        jPanel2.add(equalizationButton);

        AttributeToolBar.add(jPanel2);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Color"));

        BandButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/bandas.png"))); // NOI18N
        BandButton.setPreferredSize(new java.awt.Dimension(31, 31));
        BandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BandButtonActionPerformed(evt);
            }
        });
        jPanel3.add(BandButton);

        ColorSpaceCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "RGB", "PYCC", "Gray" }));
        ColorSpaceCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                ColorSpaceComboItemStateChanged(evt);
            }
        });
        ColorSpaceCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorSpaceComboActionPerformed(evt);
            }
        });
        jPanel3.add(ColorSpaceCombo);

        AttributeToolBar.add(jPanel3);

        RotationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotation"));
        RotationPanel.setToolTipText("Rotation");
        RotationPanel.setMinimumSize(new java.awt.Dimension(140, 100));
        RotationPanel.setPreferredSize(new java.awt.Dimension(270, 110));

        RotationSlider.setMaximum(360);
        RotationSlider.setToolTipText("");
        RotationSlider.setValue(0);
        RotationSlider.setPreferredSize(new java.awt.Dimension(120, 26));
        RotationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                RotationSliderStateChanged(evt);
            }
        });
        RotationSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                RotationSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                RotationSliderFocusLost(evt);
            }
        });
        RotationPanel.add(RotationSlider);

        rot90Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        rot90Button.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        rot90Button.setPreferredSize(new java.awt.Dimension(31, 31));
        rot90Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rot90ButtonActionPerformed(evt);
            }
        });
        RotationPanel.add(rot90Button);

        rot180Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        rot180Button.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        rot180Button.setPreferredSize(new java.awt.Dimension(31, 31));
        rot180Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rot180ButtonActionPerformed(evt);
            }
        });
        RotationPanel.add(rot180Button);

        rot270Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        rot270Button.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        rot270Button.setPreferredSize(new java.awt.Dimension(31, 31));
        rot270Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rot270ButtonActionPerformed(evt);
            }
        });
        RotationPanel.add(rot270Button);

        AttributeToolBar.add(RotationPanel);

        ScalePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Scale"));
        ScalePanel.setToolTipText("Scale");
        ScalePanel.setPreferredSize(new java.awt.Dimension(100, 110));

        MoreScaleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        MoreScaleButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        MoreScaleButton.setPreferredSize(new java.awt.Dimension(31, 31));
        MoreScaleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoreScaleButtonActionPerformed(evt);
            }
        });
        ScalePanel.add(MoreScaleButton);

        LessScaleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        LessScaleButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        LessScaleButton.setPreferredSize(new java.awt.Dimension(31, 31));
        LessScaleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LessScaleButtonActionPerformed(evt);
            }
        });
        ScalePanel.add(LessScaleButton);

        AttributeToolBar.add(ScalePanel);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Umbralizacion"));
        jPanel4.setPreferredSize(new java.awt.Dimension(150, 83));

        umbraSlider.setMaximum(255);
        umbraSlider.setValue(128);
        umbraSlider.setPreferredSize(new java.awt.Dimension(100, 26));
        umbraSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                umbraSliderStateChanged(evt);
            }
        });
        umbraSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                umbraSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                umbraSliderFocusLost(evt);
            }
        });
        jPanel4.add(umbraSlider);

        AttributeToolBar.add(jPanel4);

        AttributePanel.add(AttributeToolBar, java.awt.BorderLayout.CENTER);

        getContentPane().add(AttributePanel, java.awt.BorderLayout.SOUTH);

        mainDesktop.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mainDesktopFocusGained(evt);
            }
        });
        mainDesktop.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                mainDesktopComponentShown(evt);
            }
        });

        javax.swing.GroupLayout mainDesktopLayout = new javax.swing.GroupLayout(mainDesktop);
        mainDesktop.setLayout(mainDesktopLayout);
        mainDesktopLayout.setHorizontalGroup(
            mainDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1354, Short.MAX_VALUE)
        );
        mainDesktopLayout.setVerticalGroup(
            mainDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 205, Short.MAX_VALUE)
        );

        getContentPane().add(mainDesktop, java.awt.BorderLayout.CENTER);

        FileMenu.setText("File");

        newMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        newMenu.setMnemonic('A');
        newMenu.setText("New");
        newMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuActionPerformed(evt);
            }
        });
        FileMenu.add(newMenu);

        OpenMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        OpenMenu.setText("Open");
        OpenMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuActionPerformed(evt);
            }
        });
        FileMenu.add(OpenMenu);

        openSoundButton.setText("Open sound");
        openSoundButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSoundButtonActionPerformed(evt);
            }
        });
        FileMenu.add(openSoundButton);

        SaveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        SaveMenu.setText("Save");
        SaveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuActionPerformed(evt);
            }
        });
        FileMenu.add(SaveMenu);

        recordSoundButton.setText("Record sound");
        recordSoundButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                recordSoundButtonActionPerformed(evt);
            }
        });
        FileMenu.add(recordSoundButton);

        MenuBar.add(FileMenu);

        EditMenu.setText("See");

        SeeSBMenu.setSelected(true);
        SeeSBMenu.setText("See state bar");
        SeeSBMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeeSBMenuActionPerformed(evt);
            }
        });
        EditMenu.add(SeeSBMenu);

        SeeGeoMenu.setSelected(true);
        SeeGeoMenu.setText("See geometry bar");
        SeeGeoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeeGeoMenuActionPerformed(evt);
            }
        });
        EditMenu.add(SeeGeoMenu);

        SeeAttMenu.setSelected(true);
        SeeAttMenu.setText("See attribute bar");
        SeeAttMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeeAttMenuActionPerformed(evt);
            }
        });
        EditMenu.add(SeeAttMenu);

        MenuBar.add(EditMenu);

        resizeItem.setText("Image");

        ResizeItem.setText("Resize image");
        ResizeItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ResizeItemActionPerformed(evt);
            }
        });
        resizeItem.add(ResizeItem);

        MenuBar.add(resizeItem);

        HelpItem.setText("Help");

        AboutItem.setText("About");
        AboutItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AboutItemActionPerformed(evt);
            }
        });
        HelpItem.add(AboutItem);

        MenuBar.add(HelpItem);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SeeSBMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeeSBMenuActionPerformed
      StateBarPanel.setVisible(SeeSBMenu.isSelected());
    }//GEN-LAST:event_SeeSBMenuActionPerformed

    public void changeCurrentIntWind(InternalWindow vi){
       currentIntWind=vi;
       if(currentIntWind!=null){
            FilledButton.setSelected(currentIntWind.getCanvas().getFilled());
            TransButton.setSelected(currentIntWind.getCanvas().getTransparency());
            SmoothButton.setSelected(currentIntWind.getCanvas().getRender());
            thickSpinner.setValue((Integer)currentIntWind.getCanvas().getThick());
            
            ColorCombo.setSelectedIndex(currentIntWind.getCanvas().getCurrentColor());
            currentIntWind.getCanvas().setColor((Color)ColorCombo.getSelectedItem());
            
            ShineSlider.setValue(0);
            RotationSlider.setValue(0);
            umbraSlider.setValue(128);

            switch(currentIntWind.getCanvas().getGeometry()){
                case POINT:
                    PointButton.setSelected(true);
                break;
                case LINE:
                    LineButton.setSelected(true);
                break;
                case RECTANGLE:
                    RtgleButton.setSelected(true);
                break;
                case CIRCLE:
                    CircleButton.setSelected(true);
                break;    
            }

           if(currentIntWind.getCanvas().getEdit())
               EditButton.setSelected(true);
       }
    }
    //////////////////////////////////////////////////////////////////////////
    //  Menu events
    //////////////////////////////////////////////////////////////////////////
    private void OpenMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuActionPerformed
        InternalWindow intWind=file.openFile(this);
        if(intWind!=null){
            currentIntWind=intWind;
            mainDesktop.add(currentIntWind);
            currentIntWind.setVisible(true);
        }
    }//GEN-LAST:event_OpenMenuActionPerformed

    private void SaveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuActionPerformed
        file.saveFile(currentIntWind, this);
    }//GEN-LAST:event_SaveMenuActionPerformed

    private void newMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuActionPerformed
        currentIntWind=file.newFile(currentIntWind, this);
        mainDesktop.add(currentIntWind);
        currentIntWind.setVisible(true);

    }//GEN-LAST:event_newMenuActionPerformed

    private void SeeGeoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeeGeoMenuActionPerformed
        DrawPanel.setVisible(SeeGeoMenu.isSelected());
    }//GEN-LAST:event_SeeGeoMenuActionPerformed

    private void SeeAttMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeeAttMenuActionPerformed
        AttributeToolBar.setVisible(SeeAttMenu.isSelected());
    }//GEN-LAST:event_SeeAttMenuActionPerformed

    private void mainDesktopFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mainDesktopFocusGained

    }//GEN-LAST:event_mainDesktopFocusGained

    private void thickSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thickSpinnerStateChanged
        int value=(int)thickSpinner.getValue();
        if(value==0) thickSpinner.setValue(1);
        
        if(currentIntWind != null)
            currentIntWind.getCanvas().setThick(new BasicStroke(value),value);
    }//GEN-LAST:event_thickSpinnerStateChanged

    private void mainDesktopComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_mainDesktopComponentShown

    }//GEN-LAST:event_mainDesktopComponentShown

    private void CircleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CircleButtonActionPerformed
        StateBarLabel.setText("Circle");
        if(currentIntWind!=null){
            currentIntWind.setGeometry(GeometryType.CIRCLE);
            currentIntWind.getCanvas().setEdit(EditButton.isSelected());
            currentIntWind.repaint();
        }
    }//GEN-LAST:event_CircleButtonActionPerformed

    private void RtgleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RtgleButtonActionPerformed
        StateBarLabel.setText("Rectangle");
        if(currentIntWind!=null){
            currentIntWind.setGeometry(GeometryType.RECTANGLE);
            currentIntWind.getCanvas().setEdit(EditButton.isSelected());
            currentIntWind.repaint();
        }
    }//GEN-LAST:event_RtgleButtonActionPerformed

    private void LineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineButtonActionPerformed
        StateBarLabel.setText("Line");
        if(currentIntWind!=null){
            currentIntWind.setGeometry(GeometryType.LINE);
            currentIntWind.getCanvas().setEdit(EditButton.isSelected());
            currentIntWind.repaint();
        }
    }//GEN-LAST:event_LineButtonActionPerformed

    //////////////////////////////////////////////////////////////////////////
    // Geometry buttons
    //////////////////////////////////////////////////////////////////////////
    private void PointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PointButtonActionPerformed
        StateBarLabel.setText("Point");
        if(currentIntWind!=null){
            currentIntWind.setGeometry(GeometryType.POINT);
            currentIntWind.getCanvas().setEdit(EditButton.isSelected());
            currentIntWind.repaint();
        }
    }//GEN-LAST:event_PointButtonActionPerformed

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        if(currentIntWind!=null){
            currentIntWind.getCanvas().setEdit(EditButton.isSelected());
            currentIntWind.repaint();
        }
    }//GEN-LAST:event_EditButtonActionPerformed

    private void FilledButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilledButtonActionPerformed
       if(currentIntWind!=null){
        currentIntWind.getCanvas().setFilled(FilledButton.isSelected());
       }
    }//GEN-LAST:event_FilledButtonActionPerformed

    private void TransButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransButtonActionPerformed
        if(currentIntWind!=null){
            if(TransButton.isSelected())
                currentIntWind.getCanvas().setTransparency(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));
            else
                currentIntWind.getCanvas().setTransparency(null);
        }
    }//GEN-LAST:event_TransButtonActionPerformed

    private void SmoothButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SmoothButtonActionPerformed
        if(currentIntWind!=null){
            if(SmoothButton.isSelected())
                currentIntWind.getCanvas().setRender(new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON));
            else
                currentIntWind.getCanvas().setRender(null);
        }
    }//GEN-LAST:event_SmoothButtonActionPerformed

    private void ShineSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ShineSliderStateChanged
        RescaleOp rop=null;
        if(currentIntWind!=null) {
            if(imgSource!=null){
                try{
                    if(currentIntWind.getCanvas().getImage().getColorModel().hasAlpha()){
                       rop = new RescaleOp(new float[]{1.0f,1.0f,1.0f,1.0f},new float[]{ShineSlider.getValue(),ShineSlider.getValue(),ShineSlider.getValue(),0.0f},null); 
                    }
                    else{
                        rop = new RescaleOp(1.0F, ShineSlider.getValue(), null);
                    }
                    rop.filter(imgSource, currentIntWind.getCanvas().getImage());
                    mainDesktop.repaint();
                    
                } catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ShineSliderStateChanged

    private void FilterComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FilterComboItemStateChanged
       
    }//GEN-LAST:event_FilterComboItemStateChanged

    private void ShineSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ShineSliderFocusGained
        if(currentIntWind!=null){
             ColorModel cm = currentIntWind.getCanvas().getImage().getColorModel();
             WritableRaster raster = currentIntWind.getCanvas().getImage().copyData(null);
             boolean alfaPre = currentIntWind.getCanvas().getImage().isAlphaPremultiplied();
             imgSource = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_ShineSliderFocusGained

    private void ShineSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ShineSliderFocusLost
        imgSource=null;
    }//GEN-LAST:event_ShineSliderFocusLost

    private void FilterComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterComboActionPerformed
         BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
        if(imgSrce!=null){
            Kernel k=null;

            switch((String)FilterCombo.getSelectedItem()){
                case "Media":
                    k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                break;
                case "Enfoque":
                    k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                break;
                case "Binomial":
                    k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                break;    
                case "Relieve":
                    k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                break;
                case "Laplaciano":
                    k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                break;
            }

            ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
            
            ColorModel cm = currentIntWind.getCanvas().getImage().getColorModel();
            WritableRaster raster = currentIntWind.getCanvas().getImage().copyData(null);
            boolean alfaPre = currentIntWind.getCanvas().getImage().isAlphaPremultiplied();
            imgSource = new BufferedImage(cm,raster,alfaPre,null);
             
            cop.filter(imgSource,imgSrce);
            mainDesktop.repaint();
        }
    }//GEN-LAST:event_FilterComboActionPerformed

    private void MoreScaleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoreScaleButtonActionPerformed
        BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                AffineTransform at = AffineTransform.getScaleInstance(1.1,1.1);

            try{
               AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
               BufferedImage imgDest = atop.filter( imgSrce, null);
               ((Rectangle2D)currentIntWind.getCanvas().getClip()).setFrame(1, 1, imgDest.getWidth()-1, imgDest.getHeight()-1);
               currentIntWind.getCanvas().setImage(imgDest);
               currentIntWind.getCanvas().repaint();
            }catch(Exception e){ 
                System.err.println("Error"); 
            }
        }
    }//GEN-LAST:event_MoreScaleButtonActionPerformed

    private void LessScaleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LessScaleButtonActionPerformed
        BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                AffineTransform at = AffineTransform.getScaleInstance(0.9,0.9);

            try{
               AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
               BufferedImage imgDest = atop.filter( imgSrce, null);
               ((Rectangle2D)currentIntWind.getCanvas().getClip()).setFrame(1, 1, imgDest.getWidth()-1, imgDest.getHeight()-1);
               currentIntWind.getCanvas().setImage(imgDest);
               currentIntWind.getCanvas().repaint();
            }catch(Exception e){ 
                System.err.println("Error"); 
            }
        }
    }//GEN-LAST:event_LessScaleButtonActionPerformed

    private void rot90ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rot90ButtonActionPerformed
        BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(90.0),imgSrce.getWidth()/2,imgSrce.getHeight()/2);
            try{
               AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
               BufferedImage imgDest = atop.filter(imgSrce, null);
               ((Rectangle2D)currentIntWind.getCanvas().getClip()).setFrame(1, 1, imgDest.getWidth()-1, imgDest.getHeight()-1);
               currentIntWind.getCanvas().setImage(imgDest);
               currentIntWind.getCanvas().repaint();
            }catch(Exception e){ 
                System.err.println("Error"); 
            }
        }
    }//GEN-LAST:event_rot90ButtonActionPerformed

    private void rot180ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rot180ButtonActionPerformed
        BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(180.0),imgSrce.getWidth()/2,imgSrce.getHeight()/2);
            try{
               AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
               BufferedImage imgDest = atop.filter(imgSrce, null);
               ((Rectangle2D)currentIntWind.getCanvas().getClip()).setFrame(1, 1, imgDest.getWidth()-1, imgDest.getHeight()-1);
               currentIntWind.getCanvas().setImage(imgDest);
               currentIntWind.getCanvas().repaint();
            }catch(Exception e){ 
                System.err.println("Error"); 
            }
        }
    }//GEN-LAST:event_rot180ButtonActionPerformed

    private void rot270ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rot270ButtonActionPerformed
        BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(270.0),imgSrce.getWidth()/2,imgSrce.getHeight()/2);
            try{
               AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
               BufferedImage imgDest = atop.filter(imgSrce, null);
               ((Rectangle2D)currentIntWind.getCanvas().getClip()).setFrame(1, 1, imgDest.getWidth()-1, imgDest.getHeight()-1);
               currentIntWind.getCanvas().setImage(imgDest);
               currentIntWind.getCanvas().repaint();
            }catch(Exception e){ 
                System.err.println("Error"); 
            }
        }
    }//GEN-LAST:event_rot270ButtonActionPerformed

    private void RotationSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RotationSliderFocusGained
        if(currentIntWind!=null)
            imgSource=currentIntWind.getCanvas().getImage();
    }//GEN-LAST:event_RotationSliderFocusGained

    private void RotationSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RotationSliderFocusLost
        imgSource=null;
    }//GEN-LAST:event_RotationSliderFocusLost

    private void RotationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_RotationSliderStateChanged
        if(currentIntWind!=null) {
            if(imgSource!=null && RotationSlider.getValue()!=0){
                try{
                    AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(RotationSlider.getValue()),imgSource.getWidth()/2,imgSource.getHeight()/2);
                    AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgDest = atop.filter(imgSource, null);
                    ((Rectangle2D)currentIntWind.getCanvas().getClip()).setFrame(1, 1, imgDest.getWidth()-1, imgDest.getHeight()-1);
                    currentIntWind.getCanvas().setImage(imgDest);
                    currentIntWind.getCanvas().repaint();

                } catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_RotationSliderStateChanged

    private void ColorComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorComboActionPerformed
        ColorCombo.setBackground((Color)ColorCombo.getSelectedItem());
        if(currentIntWind!=null){
            currentIntWind.getCanvas().setCurrentColor(ColorCombo.getSelectedIndex());
            currentIntWind.getCanvas().setColor((Color)ColorCombo.getSelectedItem());
        }
    }//GEN-LAST:event_ColorComboActionPerformed

    private void contrastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrastButtonActionPerformed
        if(currentIntWind!=null) { 
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                try{
                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter( imgSrce , imgSrce);
                    mainDesktop.repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_contrastButtonActionPerformed

    private void LightUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LightUpButtonActionPerformed
        if(currentIntWind!=null) {
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                try{
                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_LOGARITHM);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter( imgSrce , imgSrce);
                    mainDesktop.repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_LightUpButtonActionPerformed

    private void GetDarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetDarkButtonActionPerformed
        if(currentIntWind!=null) {
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                try{
                    LookupTable lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter( imgSrce , imgSrce);
                    mainDesktop.repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_GetDarkButtonActionPerformed

    private void SenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SenButtonActionPerformed
        if(currentIntWind!=null) {
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                try{
                    double K = 255.0;
                    byte[] bytes = new byte[256];
                    
                    for (int x = 0; x <= 255; x++) {
                        bytes[x] = ((byte)(K * Math.abs(Math.sin(Math.toRadians((x * 1.0) * (180.0/255.0))))));
                    }
                    ByteLookupTable byteLookUpTable = new ByteLookupTable(0, bytes);
                    // Imagen origen y destino iguales
                    LookupOp lop = new LookupOp(byteLookUpTable, null);
                    lop.filter( imgSrce , imgSrce);
                    
                    mainDesktop.repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        } 
        
    }//GEN-LAST:event_SenButtonActionPerformed

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        file.saveFile(currentIntWind, this);
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void OpenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenButtonActionPerformed
        InternalWindow intWind=file.openFile(this);
        if(intWind!=null){
            currentIntWind=intWind;
            mainDesktop.add(currentIntWind);
            currentIntWind.setVisible(true);
        }
    }//GEN-LAST:event_OpenButtonActionPerformed

    private void NewFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewFileButtonActionPerformed
        currentIntWind=file.newFile(currentIntWind, this);
        mainDesktop.add(currentIntWind);
        currentIntWind.setVisible(true);
    }//GEN-LAST:event_NewFileButtonActionPerformed

    private void CopyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CopyButtonActionPerformed
        InternalWindow newIntWind = new InternalWindow(this);
        
        if(currentIntWind!= null){
            Point2D currentPositionWind=currentIntWind.getLocation();
            currentPositionWind.setLocation(currentPositionWind.getX()+20, currentPositionWind.getY()+20);
            newIntWind.setTitle(currentIntWind.getTitle());
            newIntWind.setLocation((Point) currentPositionWind);
            BufferedImage imgSrc=currentIntWind.getCanvas().getImage();
                    
            ColorModel model = imgSrc.getColorModel();
            WritableRaster raster = imgSrc.copyData(null);
            BufferedImage cloneImage = new BufferedImage(model, raster, model.isAlphaPremultiplied(), null);
               
            newIntWind.getCanvas().setImage(cloneImage);
            newIntWind.getCanvas().setClip(currentIntWind.getCanvas().getClip());
            currentIntWind=newIntWind;
            mainDesktop.add(currentIntWind);
            currentIntWind.setVisible(true);
        }
    }//GEN-LAST:event_CopyButtonActionPerformed

    private void sepiaButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sepiaButtonActionPerformed
        if(currentIntWind!=null) {
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                try{
                    SepiaOp lop = new SepiaOp();
                    lop.filter( imgSrce , imgSrce);
                    mainDesktop.repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_sepiaButtonActionPerformed

    private void BandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BandButtonActionPerformed
        if(currentIntWind!=null) {
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            String name=currentIntWind.getTitle();
            if(imgSrce!=null){
                int numBand=imgSrce.getRaster().getNumBands();
                for(int i=0;i<numBand;i++){
                    //Creamos el modelo de color de la nueva imagen basado en un espcio de color GRAY
                    ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);
                    ComponentColorModel cm = new ComponentColorModel(cs, false, false,Transparency.OPAQUE,DataBuffer.TYPE_BYTE);
                    //Creamos el nuevo raster a partir del raster de la imagen original
                    int bandList[] = {i};
                    WritableRaster bandRaster = (WritableRaster)imgSrce.getRaster().createWritableChild(0,0,
                    imgSrce.getWidth(), imgSrce.getHeight(), 0, 0, bandList);
                    //Creamos una nueva imagen que contiene como raster el correspondiente a la banda
                    BufferedImage img = new BufferedImage(cm, bandRaster, false, null);

                    currentIntWind = new InternalWindow(this);
                    currentIntWind.setTitle(name+" (banda "+i+")");
                    currentIntWind.getCanvas().setImage(img);
                    mainDesktop.add(currentIntWind);
                    currentIntWind.setVisible(true);
                    currentIntWind.setPreferredSize(new Dimension(img.getWidth(),img.getHeight()));

                    currentIntWind.getCanvas().setClip(new Rectangle2D.Float(1,1,img.getWidth()-1,img.getHeight()-1));
                    
                }
            }
        }
    }//GEN-LAST:event_BandButtonActionPerformed

    private void ColorSpaceComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_ColorSpaceComboItemStateChanged
       
    }//GEN-LAST:event_ColorSpaceComboItemStateChanged

    private void ColorSpaceComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorSpaceComboActionPerformed
        if(currentIntWind!=null) {
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            String name=currentIntWind.getTitle();
            if(imgSrce!=null){
                    ColorSpace cs=null;
                    switch(ColorSpaceCombo.getSelectedItem().toString()){
                        case "RGB":
                            if (!imgSrce.getColorModel().getColorSpace().isCS_sRGB()) 
                                cs=ColorSpace.getInstance(ColorSpace.CS_sRGB);
                            name+="(RGB)";
                        break;
                        case "PYCC":
                            cs =ColorSpace.getInstance(ColorSpace.CS_PYCC);
                            name+="(PYCC)";
                        break;
                        case "Gray":
                            if(imgSrce.getRaster().getNumBands()!=1)
                                cs =ColorSpace.getInstance(ColorSpace.CS_GRAY);
                            name+="(GRAY)";
                        break;
                    }
                    
                    if(cs!=null ){
                        ColorConvertOp cop = new ColorConvertOp(cs, null);
                        BufferedImage img = cop.filter(imgSrce, null);

                        currentIntWind = new InternalWindow(this);
                        currentIntWind.setTitle(name);
                        currentIntWind.getCanvas().setImage(img);
                        mainDesktop.add(currentIntWind);
                        currentIntWind.setVisible(true);
                        currentIntWind.setPreferredSize(new Dimension(img.getWidth(),img.getHeight()));

                        currentIntWind.getCanvas().setClip(new Rectangle2D.Float(1,1,img.getWidth()-1,img.getHeight()-1));
                    }
            }
       }
    }//GEN-LAST:event_ColorSpaceComboActionPerformed

    private void dyeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dyeButtonActionPerformed
        if(currentIntWind!=null) {
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                try{
                    TintOp tintado = new TintOp((Color)ColorCombo.getSelectedItem(),0.5f);
                    tintado.filter(imgSrce, imgSrce);
                    mainDesktop.repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_dyeButtonActionPerformed

    private void equalizationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalizationButtonActionPerformed
        if(currentIntWind!=null) {
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                try{
                    EqualizationOp ecualizacion = new EqualizationOp();
                    ecualizacion.filter(imgSrce, imgSrce);
                    mainDesktop.repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_equalizationButtonActionPerformed

    private void umbraSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_umbraSliderStateChanged
        if(currentIntWind!=null) {
            if(imgSource!=null && umbraSlider.getValue()!=128){
                try{
                    UmbralizacionOp umbral=new UmbralizacionOp(umbraSlider.getValue());
                    umbral.filter(imgSource, currentIntWind.getCanvas().getImage());
                    mainDesktop.repaint();
                } catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_umbraSliderStateChanged

    private void umbraSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbraSliderFocusGained
        if(currentIntWind!=null){
             ColorModel cm = currentIntWind.getCanvas().getImage().getColorModel();
             WritableRaster raster = currentIntWind.getCanvas().getImage().copyData(null);
             boolean alfaPre = currentIntWind.getCanvas().getImage().isAlphaPremultiplied();
             imgSource = new BufferedImage(cm,raster,alfaPre,null);
        }
    }//GEN-LAST:event_umbraSliderFocusGained

    private void umbraSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_umbraSliderFocusLost
        imgSource=null;
    }//GEN-LAST:event_umbraSliderFocusLost

    private void OwnFilterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OwnFilterButtonActionPerformed
        if(currentIntWind!=null) {
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                try{
                    MybufferedImageOp ownFilter=new MybufferedImageOp();
                    ownFilter.filter(imgSrce, imgSrce);
                    mainDesktop.repaint();
                } catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_OwnFilterButtonActionPerformed

    private void ResizeItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ResizeItemActionPerformed
         java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                ResizeDialog dialog = new ResizeDialog(new java.awt.Frame(), true,currentIntWind);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.dispose();
                    }
                });
                dialog.setVisible(true);
            }
        });
    }//GEN-LAST:event_ResizeItemActionPerformed

    private void NegativeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NegativeButtonActionPerformed
        if(currentIntWind!=null) {
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                try{
                    double K = 255.0;
                    byte[] bytes = new byte[256];
                    
                    for (int i = 0; i <= 255; i++) {
                        bytes[i] = (byte)(255-i); // Negativo
                    }
                    ByteLookupTable byteLookUpTable = new ByteLookupTable(0, bytes);
                    // Imagen origen y destino iguales
                    LookupOp lop = new LookupOp(byteLookUpTable, null);
                    lop.filter( imgSrce , imgSrce);
                    
                    mainDesktop.repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
         } 
        
    }//GEN-LAST:event_NegativeButtonActionPerformed

    private void GrayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GrayButtonActionPerformed
        if(currentIntWind!=null) {
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                ColorSpace cs = ColorSpace.getInstance(ColorSpace.CS_GRAY);  
                ColorConvertOp op = new ColorConvertOp(cs, null);  
                op.filter(imgSrce, imgSrce);
                mainDesktop.repaint();
            }
        }
                    
    }//GEN-LAST:event_GrayButtonActionPerformed

    private void AboutItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AboutItemActionPerformed
        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                AboutDialog dialog = new AboutDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        dialog.dispose();
                    }
                });
                dialog.setVisible(true);
            }
        });
    }//GEN-LAST:event_AboutItemActionPerformed

    private void RRtglButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RRtglButtonActionPerformed
        StateBarLabel.setText("Rounded Rectangle");
        if(currentIntWind!=null){
            currentIntWind.setGeometry(GeometryType.RECTANGLE);
            currentIntWind.getCanvas().setEdit(EditButton.isSelected());
            currentIntWind.repaint();
        }
    }//GEN-LAST:event_RRtglButtonActionPerformed

    private void typeLineComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeLineComboActionPerformed
        if(currentIntWind != null){
            
            switch((String)typeLineCombo.getSelectedItem()){
                case "Solid line":
                    currentIntWind.getCanvas().setThick(new BasicStroke((int)thickSpinner.getValue(), BasicStroke.CAP_BUTT,
                        BasicStroke.JOIN_MITER, 1.0F,new float[]{ 5.0F, 0.0F }, 0.0F),(int)thickSpinner.getValue());
                break;
                case "Broken line":
                    currentIntWind.getCanvas().setThick(new BasicStroke((int)thickSpinner.getValue(), BasicStroke.CAP_BUTT,
                        BasicStroke.JOIN_MITER, 1.0F,new float[]{ 5.0F, 5.0F }, 0.0F),(int)thickSpinner.getValue());
                break;


            }
        }
    }//GEN-LAST:event_typeLineComboActionPerformed

    private void TextButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextButtonActionPerformed
        StateBarLabel.setText("Text");
        if(currentIntWind!=null){
            currentIntWind.setGeometry(GeometryType.TEXT);
            currentIntWind.repaint();
        }
    }//GEN-LAST:event_TextButtonActionPerformed

    private void recordSoundButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_recordSoundButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_recordSoundButtonActionPerformed

    private void openSoundButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSoundButtonActionPerformed

        JFileChooser dlg = new JFileChooser();
                                      
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
             try{
                File f = dlg.getSelectedFile();
                InternalWindowSound newIntWind = new InternalWindowSound(f);
                newIntWind.setTitle(f.getName());
                mainDesktop.add(newIntWind);
                newIntWind.setVisible(true);
            }catch(Exception ex){
                JOptionPane.showMessageDialog(this,"Error al guardar la imagen.","Save error",JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_openSoundButtonActionPerformed
    
    //Methods 
    public void setCursorState(String message){
        CursorPosLabel.setText(message);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AboutItem;
    private javax.swing.JPanel AttributePanel;
    private javax.swing.JToolBar AttributeToolBar;
    private javax.swing.JButton BandButton;
    private javax.swing.JToggleButton CircleButton;
    private javax.swing.JComboBox ColorCombo;
    private javax.swing.JComboBox ColorSpaceCombo;
    private javax.swing.JPanel ContrastPanel;
    private javax.swing.JButton CopyButton;
    private javax.swing.JLabel CursorPosLabel;
    private javax.swing.JPanel DrawPanel;
    private javax.swing.JToggleButton EditButton;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JToggleButton FilledButton;
    private javax.swing.JComboBox FilterCombo;
    private javax.swing.JButton GetDarkButton;
    private javax.swing.JButton GrayButton;
    private javax.swing.JMenu HelpItem;
    private javax.swing.JButton LessScaleButton;
    private javax.swing.JButton LightUpButton;
    private javax.swing.JToggleButton LineButton;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JButton MoreScaleButton;
    private javax.swing.JButton NegativeButton;
    private javax.swing.JButton NewFileButton;
    private javax.swing.JButton OpenButton;
    private javax.swing.JMenuItem OpenMenu;
    private javax.swing.JButton OwnFilterButton;
    private javax.swing.JToggleButton PointButton;
    private javax.swing.JToggleButton RRtglButton;
    private javax.swing.JMenuItem ResizeItem;
    private javax.swing.JPanel RotationPanel;
    private javax.swing.JSlider RotationSlider;
    private javax.swing.JToggleButton RtgleButton;
    private javax.swing.JButton SaveButton;
    private javax.swing.JMenuItem SaveMenu;
    private javax.swing.JPanel ScalePanel;
    private javax.swing.JCheckBoxMenuItem SeeAttMenu;
    private javax.swing.JCheckBoxMenuItem SeeGeoMenu;
    private javax.swing.JCheckBoxMenuItem SeeSBMenu;
    private javax.swing.JButton SenButton;
    private javax.swing.JPanel ShinePanel;
    private javax.swing.JSlider ShineSlider;
    private javax.swing.JSpinner SizeFontSpinner;
    private javax.swing.JToggleButton SmoothButton;
    private javax.swing.JLabel StateBarLabel;
    private javax.swing.JPanel StateBarPanel;
    private javax.swing.JToggleButton TextButton;
    private javax.swing.JToggleButton TransButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JButton contrastButton;
    private javax.swing.JButton dyeButton;
    private javax.swing.JButton equalizationButton;
    private javax.swing.JComboBox fontCombo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JDesktopPane mainDesktop;
    private javax.swing.JMenuItem newMenu;
    private javax.swing.JMenuItem openSoundButton;
    private javax.swing.JMenuItem recordSoundButton;
    private javax.swing.JMenu resizeItem;
    private javax.swing.JButton rot180Button;
    private javax.swing.JButton rot270Button;
    private javax.swing.JButton rot90Button;
    private javax.swing.JButton sepiaButton;
    private javax.swing.JSpinner thickSpinner;
    private javax.swing.JPanel toolBarPanel;
    private javax.swing.JComboBox typeLineCombo;
    private javax.swing.JSlider umbraSlider;
    // End of variables declaration//GEN-END:variables
}
