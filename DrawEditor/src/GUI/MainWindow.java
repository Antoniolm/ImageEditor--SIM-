// *********************************************************************
// **
// ** Copyright (C) 2017 Antonio David LÃ³pez Machado
// **
// ** This program is free software: you can redistribute it and/or modify
// ** it under the terms of the GNU General Public License as published by
// ** the Free Software Foundation, either version 3 of the License, or
// ** (at your option) any later version.
// **
// ** This program is distributed in the hope that it will be useful,
// ** but WITHOUT ANY WARRANTY; without even the implied warranty of
// ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// ** GNU General Public License for more details.
// **
// ** You should have received a copy of the GNU General Public License
// ** along with this program.  If not, see <http://www.gnu.org/licenses/>.
// **
// *********************************************************************

package GUI;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import sm.ALM.graficos.Canvas2DPanel;
import sm.ALM.graficos.*;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.color.ColorSpace;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.Kernel;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;
import sm.image.KernelProducer;
import sm.image.LookupTableProducer;

public class MainWindow extends javax.swing.JFrame {
    /**
     * Creates new form MainWindow
     */
    
    InternalWindow currentIntWind; 
    BufferedImage imgSource;
    
    public MainWindow() {
        setMinimumSize(new Dimension(800,700));
        initComponents();
        currentIntWind = new InternalWindow(this);
        mainDesktop.add(currentIntWind);
        currentIntWind.setVisible(true);
        thickSpinner.setValue(1);        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        DrawPanel = new javax.swing.JPanel();
        toolBarPanel = new javax.swing.JPanel();
        PointButton = new javax.swing.JToggleButton();
        LineButton = new javax.swing.JToggleButton();
        RtgleButton = new javax.swing.JToggleButton();
        CircleButton = new javax.swing.JToggleButton();
        EditButton = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        ColorCombo = new javax.swing.JComboBox();
        thickSpinner = new javax.swing.JSpinner();
        FilledButton = new javax.swing.JToggleButton();
        TransButton = new javax.swing.JToggleButton();
        SmoothButton = new javax.swing.JToggleButton();
        AttributePanel = new javax.swing.JPanel();
        StateBarPanel = new javax.swing.JPanel();
        StateBarLabel = new javax.swing.JLabel();
        CursorPosLabel = new javax.swing.JLabel();
        AttributeToolBar = new javax.swing.JToolBar();
        ShinePanel = new javax.swing.JPanel();
        ShineSlider = new javax.swing.JSlider();
        jPanel1 = new javax.swing.JPanel();
        FilterCombo = new javax.swing.JComboBox();
        ContrastPanel = new javax.swing.JPanel();
        contrastButton = new javax.swing.JButton();
        LightUpButton = new javax.swing.JButton();
        GetDarkButton = new javax.swing.JButton();
        RotationPanel = new javax.swing.JPanel();
        RotationSlider = new javax.swing.JSlider();
        rot90Button = new javax.swing.JButton();
        rot180Button = new javax.swing.JButton();
        rot270Button = new javax.swing.JButton();
        ScalePanel = new javax.swing.JPanel();
        MoreScaleButton = new javax.swing.JButton();
        LessScaleButton = new javax.swing.JButton();
        mainDesktop = new javax.swing.JDesktopPane();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenuItem();
        OpenMenu = new javax.swing.JMenuItem();
        SaveMenu = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        SeeSBMenu = new javax.swing.JCheckBoxMenuItem();
        SeeGeoMenu = new javax.swing.JCheckBoxMenuItem();
        SeeAttMenu = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DrawEditor");

        DrawPanel.setLayout(new java.awt.BorderLayout());

        buttonGroup1.add(PointButton);
        PointButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        PointButton.setSelected(true);
        PointButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        PointButton.setFocusable(false);
        PointButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PointButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        PointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PointButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(PointButton);

        buttonGroup1.add(LineButton);
        LineButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        LineButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        LineButton.setFocusable(false);
        LineButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        LineButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        LineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(LineButton);

        buttonGroup1.add(RtgleButton);
        RtgleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        RtgleButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        RtgleButton.setFocusable(false);
        RtgleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RtgleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        RtgleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RtgleButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(RtgleButton);

        buttonGroup1.add(CircleButton);
        CircleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        CircleButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CircleButton.setFocusable(false);
        CircleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CircleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        CircleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CircleButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(CircleButton);

        buttonGroup1.add(EditButton);
        EditButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        EditButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(EditButton);
        toolBarPanel.add(jSeparator1);

        ColorCombo.setToolTipText("");
        ColorCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ColorComboActionPerformed(evt);
            }
        });
        toolBarPanel.add(ColorCombo);

        thickSpinner.setMinimumSize(new java.awt.Dimension(50, 22));
        thickSpinner.setPreferredSize(new java.awt.Dimension(50, 22));
        thickSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thickSpinnerStateChanged(evt);
            }
        });
        toolBarPanel.add(thickSpinner);

        FilledButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        FilledButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        FilledButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilledButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(FilledButton);

        TransButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        TransButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        TransButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(TransButton);

        SmoothButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        SmoothButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SmoothButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SmoothButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(SmoothButton);

        DrawPanel.add(toolBarPanel, java.awt.BorderLayout.WEST);

        getContentPane().add(DrawPanel, java.awt.BorderLayout.NORTH);

        AttributePanel.setLayout(new java.awt.BorderLayout());

        StateBarPanel.setLayout(new java.awt.BorderLayout());

        StateBarLabel.setText("State bar");
        StateBarLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        StateBarPanel.add(StateBarLabel, java.awt.BorderLayout.CENTER);

        CursorPosLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        StateBarPanel.add(CursorPosLabel, java.awt.BorderLayout.LINE_END);

        AttributePanel.add(StateBarPanel, java.awt.BorderLayout.SOUTH);

        AttributeToolBar.setRollover(true);

        ShinePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Shine"));
        ShinePanel.setPreferredSize(new java.awt.Dimension(140, 110));

        ShineSlider.setMaximum(255);
        ShineSlider.setMinimum(-255);
        ShineSlider.setValue(0);
        ShineSlider.setPreferredSize(new java.awt.Dimension(100, 26));
        ShineSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                ShineSliderStateChanged(evt);
            }
        });
        ShineSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                ShineSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                ShineSliderFocusLost(evt);
            }
        });
        ShinePanel.add(ShineSlider);

        AttributeToolBar.add(ShinePanel);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));
        jPanel1.setPreferredSize(new java.awt.Dimension(140, 110));

        FilterCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano" }));
        FilterCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                FilterComboItemStateChanged(evt);
            }
        });
        FilterCombo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterComboActionPerformed(evt);
            }
        });
        jPanel1.add(FilterCombo);

        AttributeToolBar.add(jPanel1);

        ContrastPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Contrast"));
        ContrastPanel.setPreferredSize(new java.awt.Dimension(140, 110));

        contrastButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/contraste.png"))); // NOI18N
        contrastButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        contrastButton.setPreferredSize(new java.awt.Dimension(31, 31));
        contrastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contrastButtonActionPerformed(evt);
            }
        });
        ContrastPanel.add(contrastButton);

        LightUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/iluminar.png"))); // NOI18N
        LightUpButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        LightUpButton.setPreferredSize(new java.awt.Dimension(31, 31));
        LightUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LightUpButtonActionPerformed(evt);
            }
        });
        ContrastPanel.add(LightUpButton);

        GetDarkButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/oscurecer.png"))); // NOI18N
        GetDarkButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        GetDarkButton.setPreferredSize(new java.awt.Dimension(31, 31));
        GetDarkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GetDarkButtonActionPerformed(evt);
            }
        });
        ContrastPanel.add(GetDarkButton);

        AttributeToolBar.add(ContrastPanel);

        RotationPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Rotation"));
        RotationPanel.setMinimumSize(new java.awt.Dimension(140, 100));
        RotationPanel.setPreferredSize(new java.awt.Dimension(280, 110));

        RotationSlider.setMaximum(360);
        RotationSlider.setToolTipText("");
        RotationSlider.setValue(0);
        RotationSlider.setPreferredSize(new java.awt.Dimension(120, 26));
        RotationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                RotationSliderStateChanged(evt);
            }
        });
        RotationSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                RotationSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                RotationSliderFocusLost(evt);
            }
        });
        RotationPanel.add(RotationSlider);

        rot90Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion90.png"))); // NOI18N
        rot90Button.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        rot90Button.setPreferredSize(new java.awt.Dimension(31, 31));
        rot90Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rot90ButtonActionPerformed(evt);
            }
        });
        RotationPanel.add(rot90Button);

        rot180Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion180.png"))); // NOI18N
        rot180Button.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        rot180Button.setPreferredSize(new java.awt.Dimension(31, 31));
        rot180Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rot180ButtonActionPerformed(evt);
            }
        });
        RotationPanel.add(rot180Button);

        rot270Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rotacion270.png"))); // NOI18N
        rot270Button.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        rot270Button.setPreferredSize(new java.awt.Dimension(31, 31));
        rot270Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rot270ButtonActionPerformed(evt);
            }
        });
        RotationPanel.add(rot270Button);

        AttributeToolBar.add(RotationPanel);

        ScalePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Scale"));
        ScalePanel.setPreferredSize(new java.awt.Dimension(100, 110));

        MoreScaleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/aumentar.png"))); // NOI18N
        MoreScaleButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        MoreScaleButton.setPreferredSize(new java.awt.Dimension(31, 31));
        MoreScaleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MoreScaleButtonActionPerformed(evt);
            }
        });
        ScalePanel.add(MoreScaleButton);

        LessScaleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/disminuir.png"))); // NOI18N
        LessScaleButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        LessScaleButton.setPreferredSize(new java.awt.Dimension(31, 31));
        LessScaleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LessScaleButtonActionPerformed(evt);
            }
        });
        ScalePanel.add(LessScaleButton);

        AttributeToolBar.add(ScalePanel);

        AttributePanel.add(AttributeToolBar, java.awt.BorderLayout.LINE_START);

        getContentPane().add(AttributePanel, java.awt.BorderLayout.SOUTH);

        mainDesktop.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mainDesktopFocusGained(evt);
            }
        });
        mainDesktop.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                mainDesktopComponentShown(evt);
            }
        });

        javax.swing.GroupLayout mainDesktopLayout = new javax.swing.GroupLayout(mainDesktop);
        mainDesktop.setLayout(mainDesktopLayout);
        mainDesktopLayout.setHorizontalGroup(
            mainDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 962, Short.MAX_VALUE)
        );
        mainDesktopLayout.setVerticalGroup(
            mainDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 191, Short.MAX_VALUE)
        );

        getContentPane().add(mainDesktop, java.awt.BorderLayout.CENTER);

        FileMenu.setText("File");

        newMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        newMenu.setMnemonic('A');
        newMenu.setText("New");
        newMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuActionPerformed(evt);
            }
        });
        FileMenu.add(newMenu);

        OpenMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        OpenMenu.setText("Open");
        OpenMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuActionPerformed(evt);
            }
        });
        FileMenu.add(OpenMenu);

        SaveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        SaveMenu.setText("Save");
        SaveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuActionPerformed(evt);
            }
        });
        FileMenu.add(SaveMenu);

        MenuBar.add(FileMenu);

        EditMenu.setText("Edit");

        SeeSBMenu.setSelected(true);
        SeeSBMenu.setText("See state bar");
        SeeSBMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeeSBMenuActionPerformed(evt);
            }
        });
        EditMenu.add(SeeSBMenu);

        SeeGeoMenu.setSelected(true);
        SeeGeoMenu.setText("See geometry bar");
        SeeGeoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeeGeoMenuActionPerformed(evt);
            }
        });
        EditMenu.add(SeeGeoMenu);

        SeeAttMenu.setSelected(true);
        SeeAttMenu.setText("See attribute bar");
        SeeAttMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeeAttMenuActionPerformed(evt);
            }
        });
        EditMenu.add(SeeAttMenu);

        MenuBar.add(EditMenu);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SeeSBMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeeSBMenuActionPerformed
      StateBarPanel.setVisible(SeeSBMenu.isSelected());
    }//GEN-LAST:event_SeeSBMenuActionPerformed

    public void changeCurrentIntWind(InternalWindow vi){
       currentIntWind=vi;
       FilledButton.setSelected(currentIntWind.getCanvas().getFilled());
       TransButton.setSelected(currentIntWind.getCanvas().getTransparency());
       SmoothButton.setSelected(currentIntWind.getCanvas().getRender());
       thickSpinner.setValue((Integer)currentIntWind.getCanvas().getThick());
       
    }
    //////////////////////////////////////////////////////////////////////////
    //  Menu events
    //////////////////////////////////////////////////////////////////////////
    private void OpenMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuActionPerformed
        String[] filterList=ImageIO.getReaderFormatNames();
        JFileChooser dlg = new JFileChooser();
        
        for(int i=0;i<filterList.length;i=i+2){
            dlg.addChoosableFileFilter(new FileNameExtensionFilter(filterList[i], filterList[i+1]));
        }
        
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
             try{
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                currentIntWind = new InternalWindow(this);
                currentIntWind.getCanvas().setImage(img);
                mainDesktop.add(currentIntWind);
                currentIntWind.setTitle(f.getName());
                currentIntWind.setVisible(true);
                currentIntWind.setPreferredSize(new Dimension(img.getWidth(),img.getHeight()));
            }catch(Exception ex){
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_OpenMenuActionPerformed

    private void SaveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuActionPerformed
        String[] filterList=ImageIO.getWriterFormatNames();
        JFileChooser dlg = new JFileChooser();
        
        for(int i=0;i<filterList.length;i=i+2){
            dlg.addChoosableFileFilter(new FileNameExtensionFilter(filterList[i], filterList[i+1]));
        }
        
        int resp = dlg.showSaveDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try {
            BufferedImage img = currentIntWind.getCanvas().getImage(true);
            if (img != null) {
            File f = dlg.getSelectedFile();
            ImageIO.write(img, "jpg", f);
            currentIntWind.setTitle(f.getName());
            }
            }catch (Exception ex) {
            System.err.println("Error al guardar la imagen");
            }
        }
    }//GEN-LAST:event_SaveMenuActionPerformed

    private void newMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuActionPerformed
        InternalWindow newIntWind = new InternalWindow(this);
        
        Point2D currentPositionWind=currentIntWind.getLocation();
        currentPositionWind.setLocation(currentPositionWind.getX()+20, currentPositionWind.getY()+20);
        newIntWind.setLocation((Point) currentPositionWind);
        
        currentIntWind=newIntWind;
        mainDesktop.add(currentIntWind);
        currentIntWind.setVisible(true);
        
         BufferedImage img;
         img = new BufferedImage(300,300,BufferedImage.TYPE_INT_RGB);
         currentIntWind.getCanvas().setImage(img);
         currentIntWind.getCanvas().setColor(new Color(255,255,255));
         
         Graphics2D g2d =img.createGraphics();
         g2d.fillRect(0,0,img.getWidth(),img.getHeight());
         
         currentIntWind.getCanvas().setColor(new Color(0,0,0));

    }//GEN-LAST:event_newMenuActionPerformed

    private void SeeGeoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeeGeoMenuActionPerformed
        //GeomToolBar.setVisible(SeeGeoMenu.isSelected());
    }//GEN-LAST:event_SeeGeoMenuActionPerformed

    private void SeeAttMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeeAttMenuActionPerformed
        AttributeToolBar.setVisible(SeeAttMenu.isSelected());
    }//GEN-LAST:event_SeeAttMenuActionPerformed

    private void mainDesktopFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mainDesktopFocusGained

    }//GEN-LAST:event_mainDesktopFocusGained

    private void thickSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thickSpinnerStateChanged
        Integer value=(int)thickSpinner.getValue();
        if(value==0) thickSpinner.setValue(1);
        
        currentIntWind.getCanvas().setThick(new BasicStroke(value),value);
    }//GEN-LAST:event_thickSpinnerStateChanged

    private void mainDesktopComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_mainDesktopComponentShown

    }//GEN-LAST:event_mainDesktopComponentShown

    private void CircleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CircleButtonActionPerformed
        StateBarLabel.setText("Circle");
        currentIntWind.setGeometry(GeometryType.CIRCLE);
        currentIntWind.getCanvas().setEdit(EditButton.isSelected());
        //currentIntWind.getCanvas().setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
    }//GEN-LAST:event_CircleButtonActionPerformed

    private void RtgleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RtgleButtonActionPerformed
        StateBarLabel.setText("Rectangle");
        currentIntWind.setGeometry(GeometryType.RECTANGLE);
        currentIntWind.getCanvas().setEdit(EditButton.isSelected());
        //currentIntWind.getCanvas().setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
    }//GEN-LAST:event_RtgleButtonActionPerformed

    private void LineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineButtonActionPerformed
        StateBarLabel.setText("Line");
        currentIntWind.setGeometry(GeometryType.LINE);
        currentIntWind.getCanvas().setEdit(EditButton.isSelected());
        //currentIntWind.getCanvas().setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
    }//GEN-LAST:event_LineButtonActionPerformed

    //////////////////////////////////////////////////////////////////////////
    // Geometry buttons
    //////////////////////////////////////////////////////////////////////////
    private void PointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PointButtonActionPerformed
        StateBarLabel.setText("Point");
        currentIntWind.setGeometry(GeometryType.POINT);
        currentIntWind.getCanvas().setEdit(EditButton.isSelected());
        //currentIntWind.getCanvas().setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
    }//GEN-LAST:event_PointButtonActionPerformed

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        currentIntWind.getCanvas().setEdit(EditButton.isSelected());
        //currentIntWind.getCanvas().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_EditButtonActionPerformed

    private void FilledButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilledButtonActionPerformed
        currentIntWind.getCanvas().setFilled(FilledButton.isSelected());
    }//GEN-LAST:event_FilledButtonActionPerformed

    private void TransButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransButtonActionPerformed
        if(TransButton.isSelected())
            currentIntWind.getCanvas().setTransparency(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));
        else
            currentIntWind.getCanvas().setTransparency(null);
    }//GEN-LAST:event_TransButtonActionPerformed

    private void SmoothButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SmoothButtonActionPerformed
        if(SmoothButton.isSelected())
            currentIntWind.getCanvas().setRender(new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON));
        else
            currentIntWind.getCanvas().setRender(null);
    }//GEN-LAST:event_SmoothButtonActionPerformed

    private void ShineSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_ShineSliderStateChanged
        if(currentIntWind!=null) {
            if(imgSource!=null){
                try{
                    RescaleOp rop = new RescaleOp(1.0F, ShineSlider.getValue(), null);
                    BufferedImage imgDest = rop.filter(imgSource, null);
                    currentIntWind.getCanvas().setImage(imgDest);
                    currentIntWind.getCanvas().repaint();
                } catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_ShineSliderStateChanged

    private void FilterComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_FilterComboItemStateChanged
       
    }//GEN-LAST:event_FilterComboItemStateChanged

    private void ShineSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ShineSliderFocusGained
        imgSource=currentIntWind.getCanvas().getImage();
    }//GEN-LAST:event_ShineSliderFocusGained

    private void ShineSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_ShineSliderFocusLost
        imgSource=null;
    }//GEN-LAST:event_ShineSliderFocusLost

    private void FilterComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterComboActionPerformed
         BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
        if(imgSrce!=null){
            Kernel k=null;

            switch((String)FilterCombo.getSelectedItem()){
                case "Media":
                    System.out.println("-"+FilterCombo.getSelectedItem());
                    k = KernelProducer.createKernel(KernelProducer.TYPE_MEDIA_3x3);
                break;
                case "Enfoque":
                    System.out.println("-"+FilterCombo.getSelectedItem());
                    k = KernelProducer.createKernel(KernelProducer.TYPE_ENFOQUE_3x3);
                break;
                case "Binomial":
                    System.out.println("-"+FilterCombo.getSelectedItem());
                    k = KernelProducer.createKernel(KernelProducer.TYPE_BINOMIAL_3x3);
                break;    
                case "Relieve":
                    System.out.println("-"+FilterCombo.getSelectedItem());
                    k = KernelProducer.createKernel(KernelProducer.TYPE_RELIEVE_3x3);
                break;
                case "Laplaciano":
                    System.out.println("-"+FilterCombo.getSelectedItem());
                    k = KernelProducer.createKernel(KernelProducer.TYPE_LAPLACIANA_3x3);
                break;
            }

            ConvolveOp cop = new ConvolveOp(k,ConvolveOp.EDGE_NO_OP,null);
            BufferedImage imgDest=cop.filter(imgSrce,null);
            currentIntWind.getCanvas().setImage(imgDest);
            currentIntWind.getCanvas().repaint();
        }
    }//GEN-LAST:event_FilterComboActionPerformed

    private void MoreScaleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MoreScaleButtonActionPerformed
        BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                AffineTransform at = AffineTransform.getScaleInstance(1.1,1.1);

            try{
               AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
               BufferedImage imgDest = atop.filter( imgSrce, null);
               currentIntWind.getCanvas().setImage(imgDest);
               currentIntWind.getCanvas().repaint();
            }catch(Exception e){ 
                System.err.println("Error"); 
            }
        }
    }//GEN-LAST:event_MoreScaleButtonActionPerformed

    private void LessScaleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LessScaleButtonActionPerformed
        BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                AffineTransform at = AffineTransform.getScaleInstance(0.9,0.9);

            try{
               AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
               BufferedImage imgDest = atop.filter( imgSrce, null);
               currentIntWind.getCanvas().setImage(imgDest);
               currentIntWind.getCanvas().repaint();
            }catch(Exception e){ 
                System.err.println("Error"); 
            }
        }
    }//GEN-LAST:event_LessScaleButtonActionPerformed

    private void rot90ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rot90ButtonActionPerformed
        BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(90.0),imgSrce.getWidth()/2,imgSrce.getHeight()/2);
            try{
               AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
               BufferedImage imgDest = atop.filter(imgSrce, null);
               currentIntWind.getCanvas().setImage(imgDest);
               currentIntWind.getCanvas().repaint();
            }catch(Exception e){ 
                System.err.println("Error"); 
            }
        }
    }//GEN-LAST:event_rot90ButtonActionPerformed

    private void rot180ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rot180ButtonActionPerformed
        BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(180.0),imgSrce.getWidth()/2,imgSrce.getHeight()/2);
            try{
               AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
               BufferedImage imgDest = atop.filter(imgSrce, null);
               currentIntWind.getCanvas().setImage(imgDest);
               currentIntWind.getCanvas().repaint();
            }catch(Exception e){ 
                System.err.println("Error"); 
            }
        }
    }//GEN-LAST:event_rot180ButtonActionPerformed

    private void rot270ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rot270ButtonActionPerformed
        BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(270.0),imgSrce.getWidth()/2,imgSrce.getHeight()/2);
            try{
               AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
               BufferedImage imgDest = atop.filter(imgSrce, null);
               currentIntWind.getCanvas().setImage(imgDest);
               currentIntWind.getCanvas().repaint();
            }catch(Exception e){ 
                System.err.println("Error"); 
            }
        }
    }//GEN-LAST:event_rot270ButtonActionPerformed

    private void RotationSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RotationSliderFocusGained
        imgSource=currentIntWind.getCanvas().getImage();
    }//GEN-LAST:event_RotationSliderFocusGained

    private void RotationSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_RotationSliderFocusLost
        imgSource=null;
    }//GEN-LAST:event_RotationSliderFocusLost

    private void RotationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_RotationSliderStateChanged
        if(currentIntWind!=null) {
            if(imgSource!=null){
                try{
                    AffineTransform at = AffineTransform.getRotateInstance(Math.toRadians(RotationSlider.getValue()),imgSource.getWidth()/2,imgSource.getHeight()/2);
                    AffineTransformOp atop = new AffineTransformOp(at,AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgDest = atop.filter(imgSource, null);
                    currentIntWind.getCanvas().setImage(imgDest);
                    currentIntWind.getCanvas().repaint();
                } catch(IllegalArgumentException e){
                        System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_RotationSliderStateChanged

    private void ColorComboActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ColorComboActionPerformed
        currentIntWind.getCanvas().setColor((Color)ColorCombo.getSelectedItem());
        /*Color colors[] = { Color.BLACK, Color.RED, Color.BLUE, Color.WHITE, Color.YELLOW, Color.GREEN };
        ColorCombo = new javax.swing.JComboBox(colors);*/
    }//GEN-LAST:event_ColorComboActionPerformed

    private void contrastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contrastButtonActionPerformed
        if(currentIntWind!=null) {
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                try{
                    int type = LookupTableProducer.TYPE_SFUNCION;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter( imgSrce , imgSrce);
                    currentIntWind.getCanvas().repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_contrastButtonActionPerformed

    private void LightUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LightUpButtonActionPerformed
        if(currentIntWind!=null) {
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                try{
                    int type = LookupTableProducer.TYPE_LOGARITHM;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter( imgSrce , imgSrce);
                    currentIntWind.getCanvas().repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_LightUpButtonActionPerformed

    private void GetDarkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GetDarkButtonActionPerformed
        if(currentIntWind!=null) {
            BufferedImage imgSrce=currentIntWind.getCanvas().getImage();
            if(imgSrce!=null){
                try{
                    int type = LookupTableProducer.TYPE_POWER;
                    LookupTable lt = LookupTableProducer.createLookupTable(type);
                    LookupOp lop = new LookupOp(lt, null);
                    // Imagen origen y destino iguales
                    lop.filter( imgSrce , imgSrce);
                    currentIntWind.getCanvas().repaint();
                } catch(Exception e){
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_GetDarkButtonActionPerformed

    
    
    
    //Methods 
    public void setCursorState(String message){
        CursorPosLabel.setText(message);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AttributePanel;
    private javax.swing.JToolBar AttributeToolBar;
    private javax.swing.JToggleButton CircleButton;
    private javax.swing.JComboBox ColorCombo;
    private javax.swing.JPanel ContrastPanel;
    private javax.swing.JLabel CursorPosLabel;
    private javax.swing.JPanel DrawPanel;
    private javax.swing.JToggleButton EditButton;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JToggleButton FilledButton;
    private javax.swing.JComboBox FilterCombo;
    private javax.swing.JButton GetDarkButton;
    private javax.swing.JButton LessScaleButton;
    private javax.swing.JButton LightUpButton;
    private javax.swing.JToggleButton LineButton;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JButton MoreScaleButton;
    private javax.swing.JMenuItem OpenMenu;
    private javax.swing.JToggleButton PointButton;
    private javax.swing.JPanel RotationPanel;
    private javax.swing.JSlider RotationSlider;
    private javax.swing.JToggleButton RtgleButton;
    private javax.swing.JMenuItem SaveMenu;
    private javax.swing.JPanel ScalePanel;
    private javax.swing.JCheckBoxMenuItem SeeAttMenu;
    private javax.swing.JCheckBoxMenuItem SeeGeoMenu;
    private javax.swing.JCheckBoxMenuItem SeeSBMenu;
    private javax.swing.JPanel ShinePanel;
    private javax.swing.JSlider ShineSlider;
    private javax.swing.JToggleButton SmoothButton;
    private javax.swing.JLabel StateBarLabel;
    private javax.swing.JPanel StateBarPanel;
    private javax.swing.JToggleButton TransButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JButton contrastButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JDesktopPane mainDesktop;
    private javax.swing.JMenuItem newMenu;
    private javax.swing.JButton rot180Button;
    private javax.swing.JButton rot270Button;
    private javax.swing.JButton rot90Button;
    private javax.swing.JSpinner thickSpinner;
    private javax.swing.JPanel toolBarPanel;
    // End of variables declaration//GEN-END:variables
}
