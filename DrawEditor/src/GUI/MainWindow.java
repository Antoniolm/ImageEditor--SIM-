// *********************************************************************
// **
// ** Copyright (C) 2017 Antonio David LÃ³pez Machado
// **
// ** This program is free software: you can redistribute it and/or modify
// ** it under the terms of the GNU General Public License as published by
// ** the Free Software Foundation, either version 3 of the License, or
// ** (at your option) any later version.
// **
// ** This program is distributed in the hope that it will be useful,
// ** but WITHOUT ANY WARRANTY; without even the implied warranty of
// ** MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// ** GNU General Public License for more details.
// **
// ** You should have received a copy of the GNU General Public License
// ** along with this program.  If not, see <http://www.gnu.org/licenses/>.
// **
// *********************************************************************

package GUI;

import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import sm.ALM.graficos.Canvas2DPanel;
import sm.ALM.graficos.*;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.color.ColorSpace;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;

public class MainWindow extends javax.swing.JFrame {
    /**
     * Creates new form MainWindow
     */
    
    InternalWindow currentIntWind;    
    
    public MainWindow() {
        setMinimumSize(new Dimension(800,700));
        initComponents();
        currentIntWind = new InternalWindow(this);
        mainDesktop.add(currentIntWind);
        currentIntWind.setVisible(true);
        thickSpinner.setValue(1);
        
        Object item= new Color(255,0,0);
        ColorCombo.addItem(item);
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        buttonGroup4 = new javax.swing.ButtonGroup();
        DrawPanel = new javax.swing.JPanel();
        toolBarPanel = new javax.swing.JPanel();
        PointButton = new javax.swing.JToggleButton();
        LineButton = new javax.swing.JToggleButton();
        RtgleButton = new javax.swing.JToggleButton();
        CircleButton = new javax.swing.JToggleButton();
        EditButton = new javax.swing.JToggleButton();
        jSeparator1 = new javax.swing.JSeparator();
        ColorCombo = new javax.swing.JComboBox();
        thickSpinner = new javax.swing.JSpinner();
        FilledButton = new javax.swing.JToggleButton();
        TransButton = new javax.swing.JToggleButton();
        SmoothButton = new javax.swing.JToggleButton();
        AttributePanel = new javax.swing.JPanel();
        StateBarPanel = new javax.swing.JPanel();
        StateBarLabel = new javax.swing.JLabel();
        CursorPosLabel = new javax.swing.JLabel();
        AttributeToolBar = new javax.swing.JToolBar();
        ColorPanel = new javax.swing.JPanel();
        BlackButton = new javax.swing.JButton();
        RedButton = new javax.swing.JButton();
        BlueButton = new javax.swing.JButton();
        WhiteButton = new javax.swing.JButton();
        YellowButton = new javax.swing.JButton();
        GreenButton = new javax.swing.JButton();
        mainDesktop = new javax.swing.JDesktopPane();
        MenuBar = new javax.swing.JMenuBar();
        FileMenu = new javax.swing.JMenu();
        newMenu = new javax.swing.JMenuItem();
        OpenMenu = new javax.swing.JMenuItem();
        SaveMenu = new javax.swing.JMenuItem();
        EditMenu = new javax.swing.JMenu();
        SeeSBMenu = new javax.swing.JCheckBoxMenuItem();
        SeeGeoMenu = new javax.swing.JCheckBoxMenuItem();
        SeeAttMenu = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("DrawEditor");

        DrawPanel.setLayout(new java.awt.BorderLayout());

        buttonGroup1.add(PointButton);
        PointButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/punto.png"))); // NOI18N
        PointButton.setSelected(true);
        PointButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        PointButton.setFocusable(false);
        PointButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        PointButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        PointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PointButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(PointButton);

        buttonGroup1.add(LineButton);
        LineButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/linea.png"))); // NOI18N
        LineButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        LineButton.setFocusable(false);
        LineButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        LineButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        LineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LineButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(LineButton);

        buttonGroup1.add(RtgleButton);
        RtgleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rectangulo.png"))); // NOI18N
        RtgleButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        RtgleButton.setFocusable(false);
        RtgleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        RtgleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        RtgleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RtgleButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(RtgleButton);

        buttonGroup1.add(CircleButton);
        CircleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/elipse.png"))); // NOI18N
        CircleButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CircleButton.setFocusable(false);
        CircleButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        CircleButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        CircleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CircleButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(CircleButton);

        buttonGroup1.add(EditButton);
        EditButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/seleccion.png"))); // NOI18N
        EditButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(EditButton);
        toolBarPanel.add(jSeparator1);

        ColorCombo.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "", "", "" }));
        ColorCombo.setToolTipText("");
        toolBarPanel.add(ColorCombo);

        thickSpinner.setMinimumSize(new java.awt.Dimension(50, 22));
        thickSpinner.setPreferredSize(new java.awt.Dimension(50, 22));
        thickSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                thickSpinnerStateChanged(evt);
            }
        });
        toolBarPanel.add(thickSpinner);

        FilledButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/rellenar.png"))); // NOI18N
        FilledButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        FilledButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilledButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(FilledButton);

        TransButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/transparencia.png"))); // NOI18N
        TransButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        TransButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TransButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(TransButton);

        SmoothButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/iconos/alisar.png"))); // NOI18N
        SmoothButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SmoothButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SmoothButtonActionPerformed(evt);
            }
        });
        toolBarPanel.add(SmoothButton);

        DrawPanel.add(toolBarPanel, java.awt.BorderLayout.WEST);

        getContentPane().add(DrawPanel, java.awt.BorderLayout.NORTH);

        AttributePanel.setLayout(new java.awt.BorderLayout());

        StateBarPanel.setLayout(new java.awt.BorderLayout());

        StateBarLabel.setText("State bar");
        StateBarLabel.setBorder(javax.swing.BorderFactory.createMatteBorder(1, 0, 0, 0, new java.awt.Color(0, 0, 0)));
        StateBarPanel.add(StateBarLabel, java.awt.BorderLayout.CENTER);
        StateBarPanel.add(CursorPosLabel, java.awt.BorderLayout.LINE_END);

        AttributePanel.add(StateBarPanel, java.awt.BorderLayout.SOUTH);

        AttributeToolBar.setRollover(true);

        ColorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Color"));
        ColorPanel.setMaximumSize(new java.awt.Dimension(1000, 1000));
        ColorPanel.setMinimumSize(new java.awt.Dimension(237, 35));
        ColorPanel.setPreferredSize(new java.awt.Dimension(140, 110));
        ColorPanel.setRequestFocusEnabled(false);

        BlackButton.setBackground(new java.awt.Color(0, 0, 0));
        BlackButton.setText(" ");
        BlackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlackButtonActionPerformed(evt);
            }
        });
        ColorPanel.add(BlackButton);

        RedButton.setBackground(new java.awt.Color(204, 0, 0));
        RedButton.setText(" ");
        RedButton.setAlignmentY(0.0F);
        RedButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RedButtonActionPerformed(evt);
            }
        });
        ColorPanel.add(RedButton);

        BlueButton.setBackground(new java.awt.Color(0, 0, 204));
        BlueButton.setText(" ");
        BlueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BlueButtonActionPerformed(evt);
            }
        });
        ColorPanel.add(BlueButton);

        WhiteButton.setBackground(new java.awt.Color(255, 255, 255));
        WhiteButton.setText(" ");
        WhiteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                WhiteButtonActionPerformed(evt);
            }
        });
        ColorPanel.add(WhiteButton);

        YellowButton.setBackground(new java.awt.Color(255, 255, 51));
        YellowButton.setText(" ");
        YellowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                YellowButtonActionPerformed(evt);
            }
        });
        ColorPanel.add(YellowButton);

        GreenButton.setBackground(new java.awt.Color(0, 204, 0));
        GreenButton.setText(" ");
        GreenButton.setToolTipText("");
        GreenButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GreenButtonActionPerformed(evt);
            }
        });
        ColorPanel.add(GreenButton);

        AttributeToolBar.add(ColorPanel);

        AttributePanel.add(AttributeToolBar, java.awt.BorderLayout.LINE_START);

        getContentPane().add(AttributePanel, java.awt.BorderLayout.SOUTH);

        mainDesktop.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                mainDesktopFocusGained(evt);
            }
        });
        mainDesktop.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                mainDesktopComponentShown(evt);
            }
        });

        javax.swing.GroupLayout mainDesktopLayout = new javax.swing.GroupLayout(mainDesktop);
        mainDesktop.setLayout(mainDesktopLayout);
        mainDesktopLayout.setHorizontalGroup(
            mainDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 962, Short.MAX_VALUE)
        );
        mainDesktopLayout.setVerticalGroup(
            mainDesktopLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 191, Short.MAX_VALUE)
        );

        getContentPane().add(mainDesktop, java.awt.BorderLayout.CENTER);

        FileMenu.setText("File");

        newMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_MASK));
        newMenu.setMnemonic('A');
        newMenu.setText("New");
        newMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newMenuActionPerformed(evt);
            }
        });
        FileMenu.add(newMenu);

        OpenMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_MASK));
        OpenMenu.setText("Open");
        OpenMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenMenuActionPerformed(evt);
            }
        });
        FileMenu.add(OpenMenu);

        SaveMenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.ALT_MASK));
        SaveMenu.setText("Save");
        SaveMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveMenuActionPerformed(evt);
            }
        });
        FileMenu.add(SaveMenu);

        MenuBar.add(FileMenu);

        EditMenu.setText("Edit");

        SeeSBMenu.setSelected(true);
        SeeSBMenu.setText("See state bar");
        SeeSBMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeeSBMenuActionPerformed(evt);
            }
        });
        EditMenu.add(SeeSBMenu);

        SeeGeoMenu.setSelected(true);
        SeeGeoMenu.setText("See geometry bar");
        SeeGeoMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeeGeoMenuActionPerformed(evt);
            }
        });
        EditMenu.add(SeeGeoMenu);

        SeeAttMenu.setSelected(true);
        SeeAttMenu.setText("See attribute bar");
        SeeAttMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SeeAttMenuActionPerformed(evt);
            }
        });
        EditMenu.add(SeeAttMenu);

        MenuBar.add(EditMenu);

        setJMenuBar(MenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SeeSBMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeeSBMenuActionPerformed
      StateBarPanel.setVisible(SeeSBMenu.isSelected());
    }//GEN-LAST:event_SeeSBMenuActionPerformed

    public void changeCurrentIntWind(InternalWindow vi){
       currentIntWind=vi;
       FilledButton.setSelected(currentIntWind.getCanvas().getFilled());
       TransButton.setSelected(currentIntWind.getCanvas().getTransparency());
       SmoothButton.setSelected(currentIntWind.getCanvas().getRender());
       thickSpinner.setValue((Integer)currentIntWind.getCanvas().getThick());
       
    }
    //////////////////////////////////////////////////////////////////////////
    //  Menu events
    //////////////////////////////////////////////////////////////////////////
    private void OpenMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenMenuActionPerformed
        String[] filterList=ImageIO.getReaderFormatNames();
        JFileChooser dlg = new JFileChooser();
        
        for(int i=0;i<filterList.length;i=i+2){
            dlg.addChoosableFileFilter(new FileNameExtensionFilter(filterList[i], filterList[i+1]));
        }
        
        int resp = dlg.showOpenDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
             try{
                File f = dlg.getSelectedFile();
                BufferedImage img = ImageIO.read(f);
                currentIntWind = new InternalWindow(this);
                currentIntWind.getCanvas().setImage(img);
                mainDesktop.add(currentIntWind);
                currentIntWind.setTitle(f.getName());
                currentIntWind.setVisible(true);
                currentIntWind.setPreferredSize(new Dimension(img.getWidth(),img.getHeight()));
            }catch(Exception ex){
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_OpenMenuActionPerformed

    private void SaveMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveMenuActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if( resp == JFileChooser.APPROVE_OPTION) {
            try {
            BufferedImage img = currentIntWind.getCanvas().getImage(true);
            if (img != null) {
            File f = dlg.getSelectedFile();
            ImageIO.write(img, "jpg", f);
            currentIntWind.setTitle(f.getName());
            }
            }catch (Exception ex) {
            System.err.println("Error al guardar la imagen");
            }
        }
    }//GEN-LAST:event_SaveMenuActionPerformed

    //////////////////////////////////////////////////////////////////////////
    // Color buttons
    //////////////////////////////////////////////////////////////////////////
    private void BlackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlackButtonActionPerformed
        currentIntWind.getCanvas().setColor(Color.BLACK);
    }//GEN-LAST:event_BlackButtonActionPerformed

    private void RedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RedButtonActionPerformed
        currentIntWind.getCanvas().setColor(Color.RED);
    }//GEN-LAST:event_RedButtonActionPerformed

    private void BlueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BlueButtonActionPerformed
        currentIntWind.getCanvas().setColor(Color.BLUE);
    }//GEN-LAST:event_BlueButtonActionPerformed

    private void WhiteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_WhiteButtonActionPerformed
        currentIntWind.getCanvas().setColor(Color.WHITE);
    }//GEN-LAST:event_WhiteButtonActionPerformed

    private void YellowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_YellowButtonActionPerformed
        currentIntWind.getCanvas().setColor(Color.YELLOW);
    }//GEN-LAST:event_YellowButtonActionPerformed

    private void GreenButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GreenButtonActionPerformed
        currentIntWind.getCanvas().setColor(Color.GREEN);
    }//GEN-LAST:event_GreenButtonActionPerformed

    private void newMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newMenuActionPerformed
        InternalWindow newIntWind = new InternalWindow(this);
        
        Point2D currentPositionWind=currentIntWind.getLocation();
        currentPositionWind.setLocation(currentPositionWind.getX()+20, currentPositionWind.getY()+20);
        newIntWind.setLocation((Point) currentPositionWind);
        
        currentIntWind=newIntWind;
        mainDesktop.add(currentIntWind);
        currentIntWind.setVisible(true);
        
         BufferedImage img;
         img = new BufferedImage(300,300,BufferedImage.TYPE_INT_RGB);
         currentIntWind.getCanvas().setImage(img);
         currentIntWind.getCanvas().setColor(new Color(255,255,255));
         
         Graphics2D g2d =img.createGraphics();
         g2d.fillRect(0,0,img.getWidth(),img.getHeight());
         
         currentIntWind.getCanvas().setColor(new Color(0,0,0));

    }//GEN-LAST:event_newMenuActionPerformed

    private void SeeGeoMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeeGeoMenuActionPerformed
        //GeomToolBar.setVisible(SeeGeoMenu.isSelected());
    }//GEN-LAST:event_SeeGeoMenuActionPerformed

    private void SeeAttMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SeeAttMenuActionPerformed
        AttributeToolBar.setVisible(SeeAttMenu.isSelected());
    }//GEN-LAST:event_SeeAttMenuActionPerformed

    private void mainDesktopFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_mainDesktopFocusGained

    }//GEN-LAST:event_mainDesktopFocusGained

    private void thickSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_thickSpinnerStateChanged
        Integer value=(int)thickSpinner.getValue();
        if(value==0) thickSpinner.setValue(1);
        
        currentIntWind.getCanvas().setThick(new BasicStroke(value),value);
    }//GEN-LAST:event_thickSpinnerStateChanged

    private void mainDesktopComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_mainDesktopComponentShown

    }//GEN-LAST:event_mainDesktopComponentShown

    private void CircleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CircleButtonActionPerformed
        StateBarLabel.setText("Circle");
        currentIntWind.setGeometry(GeometryType.CIRCLE);
        currentIntWind.getCanvas().setEdit(EditButton.isSelected());
        //currentIntWind.getCanvas().setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
    }//GEN-LAST:event_CircleButtonActionPerformed

    private void RtgleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RtgleButtonActionPerformed
        StateBarLabel.setText("Rectangle");
        currentIntWind.setGeometry(GeometryType.RECTANGLE);
        currentIntWind.getCanvas().setEdit(EditButton.isSelected());
        //currentIntWind.getCanvas().setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
    }//GEN-LAST:event_RtgleButtonActionPerformed

    private void LineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LineButtonActionPerformed
        StateBarLabel.setText("Line");
        currentIntWind.setGeometry(GeometryType.LINE);
        currentIntWind.getCanvas().setEdit(EditButton.isSelected());
        //currentIntWind.getCanvas().setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
    }//GEN-LAST:event_LineButtonActionPerformed

    //////////////////////////////////////////////////////////////////////////
    // Geometry buttons
    //////////////////////////////////////////////////////////////////////////
    private void PointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PointButtonActionPerformed
        StateBarLabel.setText("Point");
        currentIntWind.setGeometry(GeometryType.POINT);
        currentIntWind.getCanvas().setEdit(EditButton.isSelected());
        //currentIntWind.getCanvas().setCursor(new Cursor(Cursor.CROSSHAIR_CURSOR));
    }//GEN-LAST:event_PointButtonActionPerformed

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        currentIntWind.getCanvas().setEdit(EditButton.isSelected());
        //currentIntWind.getCanvas().setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_EditButtonActionPerformed

    private void FilledButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilledButtonActionPerformed
        currentIntWind.getCanvas().setFilled(FilledButton.isSelected());
    }//GEN-LAST:event_FilledButtonActionPerformed

    private void TransButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TransButtonActionPerformed
        if(TransButton.isSelected())
            currentIntWind.getCanvas().setTransparency(AlphaComposite.getInstance(AlphaComposite.SRC_OVER, 0.5f));
        else
            currentIntWind.getCanvas().setTransparency(null);
    }//GEN-LAST:event_TransButtonActionPerformed

    private void SmoothButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SmoothButtonActionPerformed
        if(SmoothButton.isSelected())
            currentIntWind.getCanvas().setRender(new RenderingHints(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON));
        else
            currentIntWind.getCanvas().setRender(null);
    }//GEN-LAST:event_SmoothButtonActionPerformed

    
    
    
    //Methods 
    public void setCursorState(String message){
        CursorPosLabel.setText(message);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AttributePanel;
    private javax.swing.JToolBar AttributeToolBar;
    private javax.swing.JButton BlackButton;
    private javax.swing.JButton BlueButton;
    private javax.swing.JToggleButton CircleButton;
    private javax.swing.JComboBox ColorCombo;
    private javax.swing.JPanel ColorPanel;
    private javax.swing.JLabel CursorPosLabel;
    private javax.swing.JPanel DrawPanel;
    private javax.swing.JToggleButton EditButton;
    private javax.swing.JMenu EditMenu;
    private javax.swing.JMenu FileMenu;
    private javax.swing.JToggleButton FilledButton;
    private javax.swing.JButton GreenButton;
    private javax.swing.JToggleButton LineButton;
    private javax.swing.JMenuBar MenuBar;
    private javax.swing.JMenuItem OpenMenu;
    private javax.swing.JToggleButton PointButton;
    private javax.swing.JButton RedButton;
    private javax.swing.JToggleButton RtgleButton;
    private javax.swing.JMenuItem SaveMenu;
    private javax.swing.JCheckBoxMenuItem SeeAttMenu;
    private javax.swing.JCheckBoxMenuItem SeeGeoMenu;
    private javax.swing.JCheckBoxMenuItem SeeSBMenu;
    private javax.swing.JToggleButton SmoothButton;
    private javax.swing.JLabel StateBarLabel;
    private javax.swing.JPanel StateBarPanel;
    private javax.swing.JToggleButton TransButton;
    private javax.swing.JButton WhiteButton;
    private javax.swing.JButton YellowButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.ButtonGroup buttonGroup4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JDesktopPane mainDesktop;
    private javax.swing.JMenuItem newMenu;
    private javax.swing.JSpinner thickSpinner;
    private javax.swing.JPanel toolBarPanel;
    // End of variables declaration//GEN-END:variables
}
